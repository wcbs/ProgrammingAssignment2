makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
a<-list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
print(a)
}
x <- matrix(1:9, 3,3)
makeCacheMatrix(x)
print(inverse)
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
a<-list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
print(a)
}
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse
}
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(x)
x <- matrix(rep(1,4),2,2)
makeCacheMatrix(x)
## The first function, makeCacheMatrix, does
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the inverse of the matrix
# 4. get the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The second function, cacheSolve, calculates the inverse the of matrix created
# in the previous function by 1) checks to see if the inverse has already been
# calculated. If that's the case, it retrieve the inverse from the cache without
# actually computing it. 2) if inverse doesn't exist yet, it calculates the
# inverse
#The following function calculates the mean of the special "vector" created with
#the above function. However, it first checks to see if the mean has already been
#calculated. If so, it gets the mean from the cache and skips the computation.
#Otherwise, it calculates the mean of the data and sets the value of the mean in
#the cache via the setmean function.
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
#The following function calculates the mean of the special "vector" created with
#the above function. However, it first checks to see if the mean has already been
#calculated. If so, it gets the mean from the cache and skips the computation.
#Otherwise, it calculates the mean of the data and sets the value of the mean in
#the cache via the setmean function.
# cachemean <- function(x, ...) {
#         m <- x$getmean()
#         if(!is.null(m)) {
#                 message("getting cached data")
#                 return(m)
#         }
#         data <- x$get()
#         m <- mean(data, ...)
#         x$setmean(m)
#         m
# }
cachematrix(x)
## The first function, makeCacheMatrix, does
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the inverse of the matrix
# 4. get the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The second function, cacheSolve, calculates the inverse the of matrix created
# in the previous function by 1) checks to see if the inverse has already been
# calculated. If that's the case, it retrieve the inverse from the cache without
# actually computing it. 2) if inverse doesn't exist yet, it calculates the
# inverse
#The following function calculates the mean of the special "vector" created with
#the above function. However, it first checks to see if the mean has already been
#calculated. If so, it gets the mean from the cache and skips the computation.
#Otherwise, it calculates the mean of the data and sets the value of the mean in
#the cache via the setmean function.
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
#The following function calculates the mean of the special "vector" created with
#the above function. However, it first checks to see if the mean has already been
#calculated. If so, it gets the mean from the cache and skips the computation.
#Otherwise, it calculates the mean of the data and sets the value of the mean in
#the cache via the setmean function.
# cachemean <- function(x, ...) {
#         m <- x$getmean()
#         if(!is.null(m)) {
#                 message("getting cached data")
#                 return(m)
#         }
#         data <- x$get()
#         m <- mean(data, ...)
#         x$setmean(m)
#         m
# }
cachematrix(x)
#                 message("getting cached data")
#                 return(m)
# the <<- operator which can be used to assign a value to an object in an
#environment that is different from the current environment. Below are two
#functions that are used to create a special object that stores a numeric
#vector and cache's its mean.
#The first function, makeVector creates a special "vector", which is really a list containing a function to
#set the value of the vector
#get the value of the vector
#set the value of the mean
#get the value of the mean
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
#The following function calculates the mean of the special "vector" created with
#the above function. However, it first checks to see if the mean has already been
#calculated. If so, it gets the mean from the cache and skips the computation.
#Otherwise, it calculates the mean of the data and sets the value of the mean in
#the cache via the setmean function.
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- [1:4]
x <- c[1:4]
x <- 1:4
cachemean(x)
cachemean(x$getmean)
cachemean(makeVector(x))
## The first function, makeCacheMatrix, does
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the inverse of the matrix
# 4. get the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The second function, cacheSolve, calculates the inverse the of matrix created
# in the previous function by 1) checks to see if the inverse has already been
# calculated. If that's the case, it retrieve the inverse from the cache without
# actually computing it. 2) if inverse doesn't exist yet, it calculates the
# inverse
#The following function calculates the mean of the special "vector" created with
#the above function. However, it first checks to see if the mean has already been
#calculated. If so, it gets the mean from the cache and skips the computation.
#Otherwise, it calculates the mean of the data and sets the value of the mean in
#the cache via the setmean function.
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
## Return a matrix that is the inverse of 'x'
}
#The following function calculates the mean of the special "vector" created with
#the above function. However, it first checks to see if the mean has already been
#calculated. If so, it gets the mean from the cache and skips the computation.
#Otherwise, it calculates the mean of the data and sets the value of the mean in
#the cache via the setmean function.
# cachemean <- function(x, ...) {
#         m <- x$getmean()
#         if(!is.null(m)) {
#                 message("getting cached data")
#                 return(m)
#         }
#         data <- x$get()
#         m <- mean(data, ...)
#         x$setmean(m)
#         m
# }
cacheSolve(makeCacheMatrix(x <- matrix(rep(1,4), 2, 2)))
cacheSolve(makeCacheMatrix(x <- matrix(c(4,2,7,6), 2, 2)))
cachematrix(x)
set <- function(y) {
s
}
# the <<- operator which can be used to assign a value to an object in an
#environment that is different from the current environment. Below are two
#functions that are used to create a special object that stores a numeric
#vector and cache's its mean.
#The first function, makeVector creates a special "vector", which is really a list containing a function to
#set the value of the vector
#get the value of the vector
#set the value of the mean
#get the value of the mean
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
a<-list(set = set, get = get,
setmean = setmean,
getmean = getmean)
print(a)
}
#The following function calculates the mean of the special "vector" created with
#the above function. However, it first checks to see if the mean has already been
#calculated. If so, it gets the mean from the cache and skips the computation.
#Otherwise, it calculates the mean of the data and sets the value of the mean in
#the cache via the setmean function.
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector(1:4))
